use std::fs;
use utils::{
    base64::base64_dec,
    crypto::aes::{decrypt_ctr, BLOCK_SIZE},
    padding::pkcs7::{pkcs7, trim_pkcs7},
};

#[test]
fn chal_18() {
    let key: Vec<u8> = "YELLOW SUBMARINE".as_bytes().to_vec();
    let nonce = [0u8; 8];

    let data = fs::read_to_string("../../data/18.txt")
        .unwrap()
        .trim()
        .to_string();

    let mut data = base64_dec(data).unwrap();

    let mut padded_data = pkcs7(&data, BLOCK_SIZE).unwrap();

    let res = decrypt_ctr(key, padded_data.clone(), nonce).unwrap();

    // trim_pkcs7(&mut padded_data, BLOCK_SIZE).unwrap();

    // let res = data;

    println!("res (hex): {:02x?}", res);
    println!("res (str): {:?}", String::from_utf8_lossy(&res));
}

// [0x59, 0x6f, 0x2c, 0x20, 0x56, 0x49, 0x50, 0x20, 0x4c, 0x65, 0x74, 0x27, 0x73, 0x20, 0x6b, 0x69, 0x63, 0x6b, 0x20, 0x69, 0x74, 0x20, 0x49, 0x63, 0x65, 0x2c, 0x20, 0x49, 0x63, 0x65, 0x2c, 0x20, 0x62, 0x61, 0x62, 0x79, 0x20, 0x49, 0x63, 0x65, 0x2c, 0x20, 0x49, 0x63, 0x65, 0x2c, 0x20, 0x62, 0x61, 0x62, 0x79, 0x20, 0x45, 0xf6, 0x62, 0x59, 0xdd, 0x40, 0x6a, 0x6b, 0xc5, 0x63, 0xa9, 0xbc]
